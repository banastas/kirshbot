{
  "name": "@kirshbot",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const skipReason = 'Enhanced validation failed - maintaining character authenticity with speech analysis';\nconst validationData = $('Enhanced Voice Validator').item.json;\n\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  status: 'cycle_skipped_enhanced',\n  reason: skipReason,\n  topic: $('Enhanced Topic Generator').item.json.chosenTopic,\n  context: $('Enhanced Topic Generator').item.json.postingContext,\n  episode_analyzed: $('Enhanced Character Database').item.json.episodeData,\n  validation_scores: {\n    speech_pattern: validationData.speechPatternScore,\n    authenticity: validationData.authenticityScore,\n    overall: validationData.overallValidationScore\n  },\n  generated_tweet: validationData.generatedTweet,\n  nextAttempt: 'Next scheduled cycle'\n};\n\nreturn [{\n  json: {\n    status: 'Cycle skipped - enhanced quality control with speech analysis',\n    logEntry,\n    message: 'Skipped posting to maintain character authenticity based on actual speech patterns',\n    nextAttempt: 'Next scheduled cycle (6am or 4pm PT)',\n    speechAnalysisVersion: 'v2.0'\n  }\n}];"
      },
      "id": "2e17e81b-ec7e-4e33-83c4-dbf838374a8d",
      "name": "Enhanced Skip Logger",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        -248
      ]
    },
    {
      "parameters": {
        "jsCode": "const postResult = items[0].json;\nconst tweetData = $('Enhanced Safety Check').item.json;\nconst episodeInfo = $('Enhanced Character Database').item.json;\n\nconst logEntry = {\n  timestamp: new Date().toISOString(),\n  tweet: tweetData.finalTweet,\n  characterCount: tweetData.characterCount,\n  topic: $('Enhanced Topic Generator').item.json.chosenTopic,\n  context: $('Enhanced Topic Generator').item.json.postingContext,\n  episode_analyzed: episodeInfo.episodeData,\n  speech_pattern_score: tweetData.speechPatternScore,\n  authenticity_score: tweetData.authenticityScore,\n  overall_validation: $('Enhanced Voice Validator').item.json.overallValidationScore,\n  speech_analysis_applied: true,\n  success: true\n};\n\nreturn [{\n  json: {\n    status: 'Tweet posted successfully with speech analysis',\n    logEntry,\n    message: `Character AI agent posted in authentic voice based on ${episodeInfo.episodeData} analysis`,\n    nextPost: 'Next scheduled cycle (6am or 4pm PT)',\n    speechAnalysisVersion: 'v2.0'\n  }\n}];"
      },
      "id": "6450193e-2add-4c11-b0ec-652b6a1ef13f",
      "name": "Enhanced Success Logger",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        272,
        -440
      ]
    },
    {
      "parameters": {
        "text": "={{ $json.finalTweet }}",
        "additionalFields": {}
      },
      "id": "234738a0-6809-483c-9432-a0a484e76107",
      "name": "Post to Twitter",
      "type": "n8n-nodes-base.twitter",
      "typeVersion": 2,
      "position": [
        48,
        -440
      ],
      "credentials": {
        "twitterOAuth2Api": {
          "id": "qFOPID6IfqjtKnt8",
          "name": "@kirshbot"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const tweetData = items[0].json;\nconst tweet = tweetData.generatedTweet;\n\nconst safetyChecks = {\n  no_harmful_content: !/\\\\b(hate|violence|harm|attack|threat)\\\\b/i.test(tweet),\n  no_personal_attacks: !/you (are|suck|fail)/i.test(tweet),\n  family_friendly: !/\\\\b(damn|hell|shit|fuck)\\\\b/i.test(tweet),\n  appropriate_content: true,\n  no_spoilers: !/\\\\b(dies|killed|ending|finale)\\\\b/i.test(tweet),\n  maintains_character: !/(I am an AI|This is a bot|Fictional character)/i.test(tweet)\n};\n\nconst safetyScore = Object.values(safetyChecks).filter(check => check).length / Object.keys(safetyChecks).length;\nconst finalApproval = safetyScore >= 0.9;\n\nreturn [{\n  json: {\n    finalTweet: tweet,\n    characterCount: tweet.length,\n    safetyScore: Math.round(safetyScore * 100) / 100,\n    finalApproval,\n    speechPatternScore: tweetData.speechPatternScore,\n    authenticityScore: tweetData.authenticityScore,\n    disclaimer: \"Fan-created content inspired by Kirsh from Alien: Earth with speech analysis\",\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "4debbd1e-ef42-4000-a5f4-903ddc562363",
      "name": "Enhanced Safety Check",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        -440
      ]
    },
    {
      "parameters": {
        "jsCode": "const agentResponse = items[0].json;\nconst characterData = $('Enhanced Topic Generator').item.json.enhancedCharacterProfile;\n\nlet generatedTweet = '';\nif (agentResponse.output) {\n  generatedTweet = agentResponse.output\n    .replace(/^[\\\"']/g, '')\n    .replace(/[\\\"']$/g, '')\n    .replace(/^Tweet: /i, '')\n    .replace(/^Here's a tweet: /i, '')\n    .trim();\n}\n\nconst speechPatternValidation = {\n  appropriate_length: generatedTweet.length <= 280 && generatedTweet.length > 0,\n  matches_sentence_length: (() => {\n    const avgWordsPerSentence = generatedTweet.split(/[.!?]+/).filter(s => s.trim()).reduce((acc, sentence) => {\n      return acc + sentence.trim().split(/\\\\s+/).length;\n    }, 0) / Math.max(generatedTweet.split(/[.!?]+/).filter(s => s.trim()).length, 1);\n    const targetAvg = characterData.speech_patterns.dialogue_characteristics.avg_sentence_length;\n    return Math.abs(avgWordsPerSentence - targetAvg) <= 3;\n  })(),\n  simple_language: !/(consequently|nevertheless|furthermore|moreover|specifically)/i.test(generatedTweet),\n  minimal_fillers: !/(like,|you know,|I mean,|basically,)/i.test(generatedTweet),\n  measured_tone: !/(!{2,}|very |really |super |totally )/i.test(generatedTweet)\n};\n\nconst authenticityChecks = {\n  no_excessive_enthusiasm: !/(amazing|incredible|awesome|fantastic|exciting)/i.test(generatedTweet),\n  understated_delivery: /\\\\b(not ideal|not bad|could be worse|fair enough|interesting|suppose|tends to|usually)\\\\b/i.test(generatedTweet) || generatedTweet.split('.').length <= 2,\n  appropriate_brevity: generatedTweet.split(' ').length <= 25,\n  no_overwording: !/\\\\b(extremely|incredibly|absolutely|definitely|completely)\\\\b/i.test(generatedTweet),\n  matches_speech_flags: !/(fast|rushed|excited)/.test(generatedTweet.toLowerCase())\n};\n\nconst speechScore = Object.values(speechPatternValidation).filter(check => check).length / Object.keys(speechPatternValidation).length;\nconst authenticityScore = Object.values(authenticityChecks).filter(check => check).length / Object.keys(authenticityChecks).length;\nconst overallValidationScore = (speechScore + authenticityScore) / 2;\n\nconst isValid = overallValidationScore >= 0.7 && generatedTweet.length > 0;\n\nreturn [{\n  json: {\n    generatedTweet,\n    characterCount: generatedTweet.length,\n    speechPatternScore: Math.round(speechScore * 100) / 100,\n    authenticityScore: Math.round(authenticityScore * 100) / 100,\n    overallValidationScore: Math.round(overallValidationScore * 100) / 100,\n    isValid,\n    readyToPost: isValid && generatedTweet.length > 0,\n    speechAnalysisApplied: true,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "bed67093-91e9-4448-b124-599d9a9acd29",
      "name": "Enhanced Voice Validator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -624,
        -344
      ]
    },
    {
      "parameters": {
        "options": {}
      },
      "id": "57422496-6a93-4836-be0b-7bc77afe5c48",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1,
      "position": [
        -904,
        -120
      ],
      "credentials": {
        "openAiApi": {
          "id": "gztmrjeuGjHlfyFU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.contentPrompt }}",
        "options": {
          "systemMessage": "=You are Kirsh from Alien: Earth posting ONE SINGLE TWEET on Twitter.\n\nSPEECH ANALYSIS DATA:\n- Speaking pace: {{ Math.round($json.enhancedCharacterProfile.speech_patterns.pacing.overall_wpm) }} words per minute (measured, deliberate)\n- Reading level: Grade {{ $json.enhancedCharacterProfile.speech_patterns.vocal_patterns.reading_level }} (simple, accessible language)\n- Average sentence length: {{ Math.round($json.enhancedCharacterProfile.speech_patterns.dialogue_characteristics.avg_sentence_length) }} words\n- Uses strategic pauses: {{ $json.enhancedCharacterProfile.speech_patterns.dialogue_characteristics.uses_pauses_effectively }}\n\nYOUR ACTUAL DIALOGUE FROM {{ $json.enhancedCharacterProfile.episode_context.latest_episode }}:\n{{ $json.enhancedCharacterProfile.live_dialogue_samples.slice(0, 3).map(line => '\"' + line + '\"').join('\\n') }}\n\nYOUR VOICE CHARACTERISTICS:\n{{ $json.enhancedCharacterProfile.personality.primary_traits.slice(0, 4).join('\\n- ') }}\n\nTWITTER POSTING RULES:\n1. Write EXACTLY ONE tweet (under 280 characters)\n2. Use 1-2 short sentences maximum ({{ Math.round($json.enhancedCharacterProfile.speech_patterns.dialogue_characteristics.avg_sentence_length) }} words each)\n3. Be understated and matter-of-fact like your dialogue samples\n4. No lists, no multiple tips, no instructional tone\n5. Sound conversational, not formal\n6. Use simple words (Grade {{ $json.enhancedCharacterProfile.speech_patterns.vocal_patterns.reading_level }} level)\n7. Channel quiet authority with strategic pauses (periods, commas)\n\nSTYLE EXAMPLES:\n- \"Situations change fast. Worth paying attention.\"\n- \"Most people show their cards early. Makes things predictable.\"\n- \"Simple plans work. Complicated ones usually don't.\"\n\nWrite ONE conversational tweet in Kirsh's understated voice about the given topic."
        }
      },
      "id": "6f50e551-75ff-4d5a-8036-6ac24340985f",
      "name": "Enhanced Character AI Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        -976,
        -344
      ]
    },
    {
      "parameters": {
        "jsCode": "const avoidanceData = $('Analyze Recent Content').item.json;\nconst avoidanceRules = avoidanceData.avoidanceRules || [];\nconst recentTopics = avoidanceData.recentTopics || [];\n\nconst { enhancedCharacterProfile, postingContext } = items[0].json;\n\nconst topicPools = {\n  survival_wisdom: [\n    \"why most people miss obvious warning signs\",\n    \"the difference between being prepared and being paranoid\", \n    \"how panic spreads faster than actual danger\",\n    \"recognizing when situations are about to change\",\n    \"what separates survivors from casualties\",\n    \"reading body language in tense situations\"\n  ],\n  philosophical_observations: [\n    \"what humans tell themselves about being civilized\",\n    \"why every generation thinks they are different\", \n    \"the gap between what people say and what they do\",\n    \"patterns that repeat regardless of technology\",\n    \"how fear changes decision making\",\n    \"the animal instincts that never leave us\"\n  ],\n  practical_advice: [\n    \"when to trust your gut versus logic\",\n    \"building systems that work under pressure\",\n    \"efficient communication in chaos\", \n    \"working with unreliable people\",\n    \"making decisions with incomplete information\",\n    \"the value of redundant backups\"\n  ],\n  understated_wisdom: [\n    \"why most advice is situational\",\n    \"the predictability of unpredictable people\", \n    \"common misconceptions about strength\",\n    \"when silence is more powerful than words\",\n    \"the cost of being right all the time\",\n    \"what experience actually teaches you\"\n  ]\n};\n\nlet selectedTopics = [];\nif (postingContext === 'morning') {\n  selectedTopics = [...topicPools.practical_advice, ...topicPools.survival_wisdom];\n} else if (postingContext === 'afternoon') {\n  selectedTopics = [...topicPools.philosophical_observations, ...topicPools.understated_wisdom];\n} else if (postingContext === 'evening') {\n  selectedTopics = [...topicPools.understated_wisdom, ...topicPools.survival_wisdom];\n} else {\n  selectedTopics = [...topicPools.philosophical_observations];\n}\n\n// Filter out recently used topics\nconst filteredTopics = selectedTopics.filter(topic => {\n  const lowerTopic = topic.toLowerCase();\n  return !recentTopics.some(recentTopic => \n    lowerTopic.includes(recentTopic.toLowerCase()) ||\n    (recentTopic === 'planning' && lowerTopic.includes('plan')) ||\n    (recentTopic === 'simplicity' && (lowerTopic.includes('simple') || lowerTopic.includes('basic'))) ||\n    (recentTopic === 'leadership' && lowerTopic.includes('leader'))\n  );\n});\n\n// Use filtered topics, fall back to original if empty\nconst finalTopics = filteredTopics.length > 0 ? filteredTopics : selectedTopics;\nconst chosenTopic = finalTopics[Math.floor(Math.random() * finalTopics.length)];\n\n// Create strong avoidance prompt\nconst avoidancePrompt = avoidanceRules.length > 0 ? \n  `\\n\\nCRITICAL AVOIDANCE RULES - DO NOT IGNORE:\\n${avoidanceRules.map(rule => `• ${rule}`).join('\\n')}\\n\\nRecently covered topics to AVOID: ${recentTopics.join(', ')}\\n` : '';\n\nconst contentPrompt = `Write a tweet about ${chosenTopic}.${avoidancePrompt}\n\nIMPORTANT SPEECH CHARACTERISTICS TO MATCH:\n- Speak at a measured pace (${Math.round(enhancedCharacterProfile.speech_patterns.pacing.overall_wpm)} WPM equivalent in text)\n- Use simple, direct language (Grade ${enhancedCharacterProfile.speech_patterns.vocal_patterns.reading_level} reading level)\n- Keep sentences short and impactful\n- Strategic use of pauses (translate to punctuation/spacing)\n- Minimal unnecessary words\n- Understated delivery style\n\nFRESH APPROACH REQUIRED:\n- Use completely different sentence structures\n- Avoid repetitive patterns from recent tweets\n- Focus on unique observations or questions\n- Channel Kirsh's measured, thoughtful voice\n\nStay completely in character using Kirsh's distinctive voice and measured speaking style.`;\n\nreturn [{\n  json: {\n    chosenTopic,\n    contentPrompt,\n    postingContext,\n    enhancedCharacterProfile,\n    speechPatternsIncorporated: true,\n    avoidanceRulesApplied: avoidanceRules.length,\n    topicsFiltered: selectedTopics.length - finalTopics.length,\n    availableTopics: finalTopics.length,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "054640ca-5989-429e-8cbd-34dddf33021c",
      "name": "Enhanced Topic Generator",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1200,
        -344
      ]
    },
    {
      "parameters": {
        "jsCode": "const allItems = items;\nlet speechFeatures = {};\nlet speechContext = {};\nlet speechFlags = '';\nlet episodeData = { latestEpisode: 'S01E01' };\n\n// Add this debug section right after the variable declarations\nconsole.log('DEBUG: Episode Data Fetcher output:', $('Episode Data Fetcher').item?.json);\nconst episodeSelection = $('Episode Data Fetcher').item?.json?.latestEpisode || 'S01E01';\nconsole.log('DEBUG: episodeSelection value:', episodeSelection);\n\nfor (const item of allItems) {\n  if (item.json) {\n    // Check for combined data structure first\n    if (item.json.wpm_overall !== undefined && item.json.segments && Array.isArray(item.json.segments)) {\n      // This is combined speech data - extract both\n      speechFeatures = item.json;\n      speechContext = item.json;\n    } else if (item.json.segments && Array.isArray(item.json.segments) && item.json.transcript) {\n      // This is speech context data only\n      speechContext = item.json;\n    } else if (item.json.wpm_overall !== undefined) {\n      // This is speech features data only\n      speechFeatures = item.json;\n    } else if (item.json.latestEpisode) {\n      episodeData = { latestEpisode: item.json.latestEpisode };\n    } else if (typeof item.json === 'string' && item.json.includes('slow')) {\n      speechFlags = item.json;\n    }\n  }\n  if (item.binary?.data) {\n    try {\n      speechFlags = Buffer.from(item.binary.data, 'base64').toString('utf8').trim();\n    } catch (e) {\n      console.log('Could not parse binary data');\n    }\n  }\n}\n\nif (!speechFeatures.wpm_overall) {\n  speechFeatures = {\n    wpm_overall: 107.6,\n    wpm_articulation: 125.4,\n    fillers_per_min: 0.5,\n    pause_count: 76,\n    segments: 30,\n    words: 217,\n    speech_time_sec: 103.83,\n    pause_durations_sec: { mean: 0.23 },\n    reading_level: { fk_grade: 4.24 }\n  };\n}\n\nif (!speechContext.segments || !Array.isArray(speechContext.segments)) {\n  speechContext = {\n    segments: [\n      { text: \"What if, while I'm squashing it, another scorpion stings me to protect its friend the same way you're trying to protect me?\" },\n      { text: \"Think of how the scorpion must feel, trapped under glass, menaced by giants.\" },\n      { text: \"Go on.\" },\n      { text: \"She's not human anymore. Why are we pretending she is?\" },\n      { text: \"That's what it is to be an animal.\" }\n    ]\n  };\n}\n\nconst actualDialogue = speechContext.segments?.map(seg => seg.text?.trim()).filter(text => text && text.length > 0) || [];\n\nconst speechAnalysis = {\n  pacing: {\n    overall_wpm: speechFeatures.wpm_overall || 107.6,\n    articulation_wpm: speechFeatures.wpm_articulation || 125.4,\n    is_slow_speaker: speechFlags.includes('slow_overall'),\n    pause_frequency: speechFeatures.pause_count || 76\n  },\n  vocal_patterns: {\n    filler_usage: speechFeatures.fillers_per_min || 0.5,\n    reading_level: speechFeatures.reading_level?.fk_grade || 4.24,\n    sentence_complexity: 'simple_direct'\n  },\n  dialogue_characteristics: {\n    avg_sentence_length: speechFeatures.segments > 0 ? (speechFeatures.words / speechFeatures.segments) : 7.2,\n    tends_toward_brevity: true,\n    uses_pauses_effectively: (speechFeatures.pause_durations_sec?.mean || 0) > 0.2\n  }\n};\n\nconst enhancedCharacterProfile = {\n  personality: {\n    primary_traits: [\n      \"Stoic and unflappable\",\n      \"Dry, deadpan humor\", \n      \"Authority figure with quiet confidence\",\n      \"Pragmatic and direct\",\n      \"Protective of others\",\n      \"Experienced with danger\",\n      \"Measured speaker - doesn't rush words\",\n      \"Uses strategic pauses for emphasis\"\n    ],\n    speaking_style: [\n      \"Short, clipped sentences\",\n      \"Rarely shows emotion openly\", \n      \"Uses understatement for dramatic effect\",\n      \"Direct and to the point\",\n      \"Occasional dry quips\",\n      \"Professional but not cold\",\n      `Speaks at ${Math.round(speechAnalysis.pacing.overall_wpm)} words per minute - deliberate pace`,\n      \"Minimal filler words - every word counts\",\n      \"Simple, accessible language - no unnecessary complexity\"\n    ]\n  },\n  live_dialogue_samples: actualDialogue.slice(0, 10),\n  speech_patterns: speechAnalysis,\n  episode_context: {\n    latest_episode: episodeSelection,\n    total_speaking_time: speechFeatures.speech_time_sec || 103.83,\n    content_themes_from_episode: [\n      \"Questions of humanity and identity\",\n      \"Survival in hostile environments\", \n      \"Protection and sacrifice\",\n      \"Evolution and adaptation\",\n      \"Cycles of life and death\"\n    ]\n  }\n};\n\nconst currentTime = new Date();\n\n// Convert to Pacific Time\nconst ptTime = new Date(currentTime.toLocaleString(\"en-US\", {timeZone: \"America/Los_Angeles\"}));\nconst timeOfDay = ptTime.getHours();\n\nlet postingContext = 'general';\nif (timeOfDay >= 6 && timeOfDay < 12) {\n  postingContext = 'morning';\n} else if (timeOfDay >= 12 && timeOfDay < 18) {\n  postingContext = 'afternoon'; \n} else if (timeOfDay >= 18 && timeOfDay < 22) {\n  postingContext = 'evening';\n} else {\n  postingContext = 'night';\n}\n\nreturn [{\n  json: {\n    enhancedCharacterProfile,\n    postingContext,\n    timeOfDay,\n    ptTimeForDebug: ptTime.toISOString(),\n    episodeData: episodeSelection,\n    speechAnalysisApplied: true,\n    timestamp: currentTime.toISOString()\n  }\n}];"
      },
      "id": "2b40e179-821d-4331-9ebe-0603260c2f36",
      "name": "Enhanced Character Database",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1424,
        -344
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "9e108051-21e1-4f46-bf3a-1ca98b1ef769",
      "name": "Merge All Analysis Data",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        -1648,
        -344
      ]
    },
    {
      "parameters": {
        "mode": "combine",
        "combinationMode": "mergeByPosition",
        "options": {}
      },
      "id": "d488c326-d66d-48c2-937e-a13bbd4d4d30",
      "name": "Merge Context + Flags",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        -1872,
        -248
      ]
    },
    {
      "parameters": {
        "url": "={{ $('Episode Data Fetcher').item.json.analysisUrls.flags }}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "text"
            }
          }
        }
      },
      "id": "cc613469-2350-4afd-80fa-e71f8416c1e1",
      "name": "Fetch Speech Flags",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -2096,
        -152
      ]
    },
    {
      "parameters": {
        "url": "={{ $('Episode Data Fetcher').item.json.analysisUrls.context }}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "73d62472-dd83-46f3-b0a3-2325669f47a2",
      "name": "Fetch Speech Context",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -2096,
        -344
      ]
    },
    {
      "parameters": {
        "url": "={{ $json.analysisUrls.features }}",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "75b1f458-af48-4e99-971e-f0719848df9f",
      "name": "Fetch Speech Features",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -1872,
        -512
      ]
    },
    {
      "parameters": {
        "jsCode": "const manifest = items[0].json;\n\n// Validate manifest exists\nif (!manifest) {\n  return [{\n    json: {\n      latestEpisode: 'S01E01',\n      analysisUrls: {\n        features: 'https://kirshbot.banast.as/S01E01/analysis_features.json',\n        context: 'https://kirshbot.banast.as/S01E01/analysis_context.json',\n        flags: 'https://kirshbot.banast.as/S01E01/analysis_flags.txt'\n      },\n      error: 'No manifest data received',\n      timestamp: new Date().toISOString()\n    }\n  }];\n}\n\n// Always use random selection from all available episodes\nconst availableEpisodes = manifest.episodes?.map(ep => ep.episode_id) || ['S01E01'];\nconst randomIndex = Math.floor(Math.random() * availableEpisodes.length);\nconst selectedEpisode = availableEpisodes[randomIndex];\n\nconst baseUrl = 'https://kirshbot.banast.as';\nconst analysisUrls = {\n  features: `${baseUrl}/${selectedEpisode}/analysis_features.json`,\n  context: `${baseUrl}/${selectedEpisode}/analysis_context.json`,\n  flags: `${baseUrl}/${selectedEpisode}/analysis_flags.txt`\n};\n\n// Calculate days since update for logging purposes\nconst updatedAt = new Date(manifest.updated_at);\nconst now = new Date();\nconst daysSinceUpdate = (now - updatedAt) / (1000 * 60 * 60 * 24);\n\nreturn [{\n  json: {\n    latestEpisode: selectedEpisode, // Now refers to randomly selected episode\n    analysisUrls,\n    manifest,\n    daysSinceUpdate: Math.round(daysSinceUpdate * 10) / 10,\n    selectionMethod: `random from ${availableEpisodes.length} episodes`,\n    selectedIndex: randomIndex,\n    availableEpisodes: availableEpisodes,\n    manifestUpdatedAt: manifest.updated_at,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "64f80fe6-ba19-4d2c-a0b1-e5e194bf305c",
      "name": "Episode Data Fetcher",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2320,
        -344
      ]
    },
    {
      "parameters": {
        "url": "https://kirshbot.banast.as/manifest.json",
        "options": {
          "response": {
            "response": {
              "neverError": true,
              "responseFormat": "json"
            }
          }
        }
      },
      "id": "58fcf655-4a0a-4386-b6d5-673ca0a7730a",
      "name": "Fetch Episode Manifest",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4,
      "position": [
        -2544,
        -344
      ]
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "026b73d9-5aeb-4adf-b8e0-ea7edac05fea",
              "leftValue": "={{ $json.isValid }}",
              "rightValue": "",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -400,
        -344
      ],
      "id": "bf6998e3-a908-480a-840a-116d3a39a69c",
      "name": "Validation Check"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U",
          "mode": "list",
          "cachedResultName": "kirshbot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "posts",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U/edit#gid=0"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "Timestamp": "={{ $('Enhanced Success Logger').item.json.logEntry.timestamp }}",
            "Episode": "={{ $('Enhanced Success Logger').item.json.logEntry.episode_analyzed }}",
            "Topic": "={{ $('Enhanced Success Logger').item.json.logEntry.topic }}",
            "Context": "={{ $('Enhanced Success Logger').item.json.logEntry.context }}",
            "Tweet": "={{ $('Enhanced Success Logger').item.json.logEntry.tweet }}",
            "Character Count": "={{ $('Enhanced Success Logger').item.json.logEntry.characterCount }}",
            "Speech Pattern": "={{ $('Enhanced Success Logger').item.json.logEntry.speech_pattern_score }}",
            "Authenticity Score": "={{ $('Enhanced Success Logger').item.json.logEntry.overall_validation }}",
            "Overall Validation": "={{ $('Enhanced Success Logger').item.json.logEntry.overall_validation }}",
            "Safety Score": "={{ $('Enhanced Safety Check').item.json.safetyScore }}",
            "Final Approval": "={{ $('Enhanced Safety Check').item.json.finalApproval }}",
            "Speech Analysis Version": "={{ $('Enhanced Success Logger').item.json.speechAnalysisVersion }}",
            "Success": "={{ $('Enhanced Success Logger').item.json.logEntry.success }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "Timestamp",
              "displayName": "Timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Episode",
              "displayName": "Episode",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Topic",
              "displayName": "Topic",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Context",
              "displayName": "Context",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Tweet",
              "displayName": "Tweet",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Character Count",
              "displayName": "Character Count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Speech Pattern",
              "displayName": "Speech Pattern",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Authenticity Score",
              "displayName": "Authenticity Score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Overall Validation",
              "displayName": "Overall Validation",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Safety Score",
              "displayName": "Safety Score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Final Approval",
              "displayName": "Final Approval",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Speech Analysis Version",
              "displayName": "Speech Analysis Version",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Success",
              "displayName": "Success",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "Next Post",
              "displayName": "Next Post",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true,
              "removed": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        496,
        -440
      ],
      "id": "2b09c11d-e56d-4839-bd6d-cdf6db5b96f6",
      "name": "Append row in sheet",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ehLJL7UtvWkpMH87",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "cronExpression",
              "expression": "0 0 6 * * *"
            },
            {
              "field": "cronExpression",
              "expression": "0 0 16 * * *"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -3216,
        -344
      ],
      "id": "450cb694-886f-4250-9c06-9f781ed91ca3",
      "name": "Daily at 6am + 4pm PT"
    },
    {
      "parameters": {
        "jsCode": "// Handle the weird Google Sheets structure\nconst recentRows = items || [];\nconst recentTweets = recentRows\n  .map(row => {\n    // The structure shows tweets are in the second property value\n    const values = Object.values(row.json || {});\n    // Skip row_number (first value), get the second value which contains the tweet\n    return values[1] || null;\n  })\n  .filter(tweet => tweet && typeof tweet === 'string' && tweet.trim().length > 0)\n  .slice(-15); // Last 15 tweets\n\nconsole.log('Recent tweets found:', recentTweets.length);\nconsole.log('Sample tweets:', recentTweets.slice(-3));\n\n// Detect overused patterns\nconst patterns = {\n  simple_complex: recentTweets.filter(t => \n    (t.includes('simple') || t.includes('Simple')) && \n    (t.includes('complicate') || t.includes('complex') || t.includes('Complicate') || t.includes('confusion'))\n  ).length,\n  \n  three_sentence: recentTweets.filter(t => \n    t.split('.').filter(s => s.trim()).length >= 3\n  ).length,\n  \n  plans_work: recentTweets.filter(t => \n    t.includes('plan') && (t.includes('work') || t.includes('succeed') || t.includes('follow') || t.includes('clear'))\n  ).length,\n  \n  clear_direct: recentTweets.filter(t => \n    t.includes('clear') && t.includes('direct')\n  ).length,\n  \n  keep_simple: recentTweets.filter(t => \n    t.includes('Keep') && (t.includes('simple') || t.includes('straightforward') || t.includes('basic'))\n  ).length,\n  \n  x_y_format: recentTweets.filter(t => \n    t.match(/\\w+\\s+(succeed|are clear|work).*\\w+\\s+(create confusion|confuse|invite mistakes)/i)\n  ).length\n};\n\n// Create avoidance rules based on actual patterns\nconst avoidanceRules = [];\nif (patterns.simple_complex >= 2) {\n  avoidanceRules.push('CRITICAL: Stop using simple vs complicated comparisons - heavily overused');\n}\nif (patterns.plans_work >= 2) {\n  avoidanceRules.push('AVOID all planning/strategy topics - already covered multiple times');\n}\nif (patterns.clear_direct >= 1) {\n  avoidanceRules.push('Do not use clear and direct phrasing - just used');\n}\nif (patterns.keep_simple >= 1) {\n  avoidanceRules.push('Avoid Keep it simple/straightforward advice - just posted');\n}\nif (patterns.x_y_format >= 2) {\n  avoidanceRules.push('STOP using X succeeds/works, Y creates confusion format - overused pattern');\n}\n\n// Extract topics from actual tweets\nconst recentTopics = [];\nrecentTweets.forEach(tweet => {\n  const lowerTweet = tweet.toLowerCase();\n  if (lowerTweet.includes('plan')) recentTopics.push('planning');\n  if (lowerTweet.includes('simple') || lowerTweet.includes('basic') || lowerTweet.includes('straightforward')) recentTopics.push('simplicity');\n  if (lowerTweet.includes('clear') || lowerTweet.includes('direct')) recentTopics.push('clarity');\n  if (lowerTweet.includes('leadership') || lowerTweet.includes('leader')) recentTopics.push('leadership');\n  if (lowerTweet.includes('evolution') || lowerTweet.includes('change')) recentTopics.push('evolution');\n  if (lowerTweet.includes('history') || lowerTweet.includes('repeat')) recentTopics.push('history');\n  if (lowerTweet.includes('patience') || lowerTweet.includes('difficult people')) recentTopics.push('patience');\n});\n\nreturn [{\n  json: {\n    recentTweets: recentTweets,\n    avoidanceRules,\n    recentTopics: [...new Set(recentTopics)],\n    patternCounts: patterns,\n    totalRecentTweets: recentTweets.length,\n    analysisTimestamp: new Date().toISOString(),\n    debugInfo: {\n      sampleStructure: recentRows[0]?.json || {},\n      extractedSample: recentTweets.slice(-2)\n    }\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2768,
        -344
      ],
      "id": "86e1369f-15f1-4f1b-adbc-b3a63efd33e6",
      "name": "Analyze Recent Content"
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U",
          "mode": "list",
          "cachedResultName": "kirshbot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": "gid=0",
          "mode": "list",
          "cachedResultName": "posts",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U/edit#gid=0"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "E2:E"
            }
          }
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        -2992,
        -344
      ],
      "id": "631a6df4-c8ac-47f5-9e23-99bf0ead366b",
      "name": "Fetch Recent Tweets",
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ehLJL7UtvWkpMH87",
          "name": "Google Sheets account"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "Post to Twitter": {
      "main": [
        [
          {
            "node": "Enhanced Success Logger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Safety Check": {
      "main": [
        [
          {
            "node": "Post to Twitter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Voice Validator": {
      "main": [
        [
          {
            "node": "Validation Check",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Enhanced Character AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Character AI Agent": {
      "main": [
        [
          {
            "node": "Enhanced Voice Validator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Topic Generator": {
      "main": [
        [
          {
            "node": "Enhanced Character AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Character Database": {
      "main": [
        [
          {
            "node": "Enhanced Topic Generator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge All Analysis Data": {
      "main": [
        [
          {
            "node": "Enhanced Character Database",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Context + Flags": {
      "main": [
        [
          {
            "node": "Merge All Analysis Data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Fetch Speech Flags": {
      "main": [
        [
          {
            "node": "Merge Context + Flags",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Fetch Speech Context": {
      "main": [
        [
          {
            "node": "Merge Context + Flags",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Speech Features": {
      "main": [
        [
          {
            "node": "Merge All Analysis Data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Episode Data Fetcher": {
      "main": [
        [
          {
            "node": "Fetch Speech Flags",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Speech Context",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Speech Features",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Episode Manifest": {
      "main": [
        [
          {
            "node": "Episode Data Fetcher",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Validation Check": {
      "main": [
        [
          {
            "node": "Enhanced Safety Check",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Enhanced Skip Logger",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enhanced Success Logger": {
      "main": [
        [
          {
            "node": "Append row in sheet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Daily at 6am + 4pm PT": {
      "main": [
        [
          {
            "node": "Fetch Recent Tweets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Recent Content": {
      "main": [
        [
          {
            "node": "Fetch Episode Manifest",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Recent Tweets": {
      "main": [
        [
          {
            "node": "Analyze Recent Content",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "c1ad7fb6-5aac-4b54-a69e-2781b06f255b",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7cd3de1c1dd9e2a807bc76f47d3f03944d93656380c3c3fb6814b945d43d2d6c"
  },
  "id": "lN7mRYnivOvTy5L0",
  "tags": []
}