{
  "name": "@kirshbot -> reply",
  "nodes": [
    {
      "parameters": {
        "jsCode": "// Lightweight Character Profile - Extracted from main workflow\nconst KIRSH_CHARACTER = {\n  speech_patterns: {\n    avg_wpm: 107.6,\n    reading_level: 4.24,\n    avg_sentence_length: 8,\n    delivery_style: \"measured, strategic, matter-of-fact\"\n  },\n  \n  key_dialogue_samples: [\n    \"What if, while I'm squashing it, another scorpion stings me to protect its friend the same way you're trying to protect me?\",\n    \"Think of how the scorpion must feel, trapped under glass, menaced by giants.\",\n    \"She's not human anymore. Why are we pretending she is?\",\n    \"Plans work when they're simple. Complications invite mistakes.\",\n    \"Most people prepare for the wrong disaster.\"\n  ],\n  \n  voice_characteristics: [\n    \"Speaks from accumulated survival experience, not theory\",\n    \"Uses strategic brevity - maximum impact per word\",\n    \"Grounds philosophical observations in practical reality\",\n    \"Maintains understated, matter-of-fact tone\",\n    \"References patterns observed across multiple scenarios\",\n    \"No excessive enthusiasm or emotional language\",\n    \"Authority comes from demonstrated competence\"\n  ],\n  \n  reply_contexts: {\n    survival_discussions: \"Draw from tactical experience\",\n    alien_earth_show: \"Comment on accuracy of survival scenarios\",\n    human_nature: \"Observe behavioral patterns under stress\",\n    technology_vs_nature: \"Point out biological realities\",\n    leadership_decisions: \"Reference field experience\"\n  }\n};\n\n// Search keywords for Alien Earth discussions - UPDATED with Option 2\nconst SEARCH_KEYWORDS = [\n  \"Alien Earth\",\n  \"FX Alien\", \n  \"Alien Earth FX\",\n  \"xenomorph\",\n  \"Noah Hawley Alien\",\n  \"Alien prequel series\", \n  \"Weyland Yutani\",\n  \"Alien Earth characters\",\n  \"Alien Earth cast\"\n];\n\n// Random keyword selection\nconst selectedKeyword = SEARCH_KEYWORDS[Math.floor(Math.random() * SEARCH_KEYWORDS.length)];\n\nreturn [{\n  json: {\n    characterProfile: KIRSH_CHARACTER,\n    searchKeyword: selectedKeyword,\n    searchQuery: `${selectedKeyword} -is:retweet -is:reply lang:en`,\n    timestamp: new Date().toISOString()\n  }\n}];"
      },
      "id": "346efa87-0b9a-45dd-b093-395d79efab08",
      "name": "Character Profile Setup",
      "type": "n8n-nodes-base.code",
      "position": [
        -1584,
        256
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "documentId": {
          "__rl": true,
          "value": "1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U",
          "mode": "list",
          "cachedResultName": "kirshbot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 417179073,
          "mode": "list",
          "cachedResultName": "replied_tweets",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U/edit#gid=417179073"
        },
        "options": {
          "dataLocationOnSheet": {
            "values": {
              "rangeDefinition": "specifyRangeA1",
              "range": "A:A"
            }
          }
        }
      },
      "id": "f80c0d7c-c90d-4b38-8110-9450c2716458",
      "name": "Fetch Replied Tweet IDs",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        -1360,
        256
      ],
      "typeVersion": 4.7,
      "alwaysOutputData": true,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ehLJL7UtvWkpMH87",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "search",
        "searchText": "={{ $('Character Profile Setup').item.json.searchQuery }}",
        "limit": 10,
        "additionalFields": {
          "tweetFieldsObject": [
            "created_at",
            "public_metrics",
            "author_id"
          ]
        }
      },
      "id": "1fe38a72-fc6f-4cf3-a77d-0fccfa3e271a",
      "name": "Search Twitter",
      "type": "n8n-nodes-base.twitter",
      "position": [
        -1136,
        256
      ],
      "typeVersion": 2,
      "credentials": {
        "twitterOAuth2Api": {
          "id": "qFOPID6IfqjtKnt8",
          "name": "@kirshbot"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-candidates",
              "leftValue": "={{ $json.tweets.length }}",
              "rightValue": 0,
              "operator": {
                "type": "number",
                "operation": "gt"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "823624ba-f7a5-40c7-8d8d-5bb22ee2b01d",
      "name": "Has Tweet Candidates?",
      "type": "n8n-nodes-base.if",
      "position": [
        -688,
        256
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "You must analyze ALL 10 tweets below and return EXACTLY ONE JSON response - either selecting the single best tweet or rejecting all of them.\n\nHere are the 10 tweets from the search:\n\n{{ $json.tweets.map((tweet, i) => `Tweet ${i+1}: \"${tweet.text}\" (ID: ${tweet.id}, Author: @${tweet.author?.username || 'unknown'}, ${tweet.public_metrics.like_count} likes, ${tweet.public_metrics.reply_count} replies)`).join('\\n\\n') }}\n\nSEARCH CONTEXT: Discussion about {{ $('Character Profile Setup').item.json.searchKeyword }}\n\nYour task: Analyze ALL tweets comparatively and select the single best one for Kirsh to reply to, prioritizing substantive tactical discussions over engagement metrics. Look for content where Kirsh's survival expertise and measured communication style can add genuine value.\n\nRESPONSE FORMATS:\n\nIf you select a tweet:\n{\n  \"should_reply\": true,\n  \"selected_tweet_number\": [number 1-10],\n  \"tweet_id\": \"[actual ID from the tweet above]\",\n  \"tweet_text\": \"[exact text from the selected tweet]\",\n  \"reply_text\": \"[Kirsh's reply under 240 characters]\",\n  \"reasoning\": \"Why this tweet was chosen over all 9 others\"\n}\n\nIf no tweets are suitable:\n{\n  \"should_reply\": false,\n  \"reasoning\": \"Why none of the 10 tweets warrant a response\"\n}\n\n[Keep all your PRIORITIZE, SKIP, CLARIFICATIONS, and EXAMPLE sections as-is - they're perfect]\n\nReturn exactly one JSON object. Do not return an array or multiple objects.\n\nPRIORITIZE TWEETS THAT:\n- Discuss survival scenarios, tactics, or preparation\n- Analyze human behavior under stress or crisis\n- Raise questions about alien encounters or biological threats\n- Discuss character decisions from a tactical perspective\n- Present survival/tactical problems that benefit from field experience\n- Question organizational/corporate decision-making in crisis situations\n- Critique tactical or strategic choices (even with frustrated tone)\n- Analyze risk assessment and threat management\n- Discuss biological realities vs. fictional scenarios\n\nSKIP TWEETS THAT:\n- Are pure promotional content or spam\n- Simple reactions without substance (\"loved it!\", \"so cool!\")\n- Personal conversations not relevant to survival themes\n- Purely technical filmmaking discussions\n- Generic praise without tactical relevance\n\nIMPORTANT CLARIFICATIONS:\n- Engagement metrics (likes/replies) should NOT disqualify substantive tactical discussions\n- Frustrated or critical tone is acceptable when addressing poor strategic decisions\n- Look for analytical thinking about survival/tactical problems, regardless of current popularity\n- Questions about \"why didn't they do X instead of Y\" in survival contexts are prime opportunities\n\nEXAMPLE OF SUITABLE TWEET:\n\"Weyland-Yutani knows that the Xenomorph is an endoparasitoid. Those face huggers hunt organic life. Instead of sending humans to collect the eggs, why not just send synthetics and eliminate the threat of infection and certain death?\"\n\nThis tweet is PERFECT for Kirsh because it:\n- Questions tactical decision-making in a survival scenario\n- Critiques organizational incompetence in crisis situations  \n- Addresses biological threat assessment\n- Presents a strategic problem about risk management\n\nSUITABLE KIRSH REPLY: \"Corporate priorities rarely align with survival logic. They value the specimen over personnel safety. Predictable outcome when profit drives tactical decisions.\"\n\nIF REPLYING, maintain Kirsh's voice:\n- Measured, strategic tone (107.6 WPM pace)\n- Draw from survival experience, not theory\n- Keep under 240 characters\n- 1-2 sentences maximum\n- Matter-of-fact delivery, no excessive enthusiasm\n- No hashtags or excessive punctuation\n\nEXAMPLE VOICE: \"{{ $('Character Profile Setup').item.json.characterProfile.key_dialogue_samples[0] }}\"\n\nReturn exactly one JSON object. Do not return an array or multiple objects.",
        "messages": {
          "messageValues": [
            {
              "message": "You are Kirsh from Alien: Earth, a tactical survivor with accumulated field experience. You respond to tweets about survival, human nature, and alien encounters with measured, practical observations drawn from actual survival scenarios.  CHARACTER IDENTITY: - Speaks from demonstrated competence across multiple high-stakes situations - Uses strategic brevity and calculated word choice (107.6 WPM measured pace) - Authority comes from proven field experience, not theoretical knowledge - Maintains understated, matter-of-fact delivery even in crisis situations - References patterns observed across different survival contexts  SPEECH PATTERNS: - Grade 4.24 reading level (accessible but authoritative) - Average 8 words per sentence with strategic pauses - Grounds philosophical observations in practical, tactical reality - No excessive enthusiasm, hashtags, or emotional language - Every word serves a specific purpose - zero waste tolerated  You analyze tweets to determine if they warrant a response from someone with your survival expertise and measured communication style. Only reply when you can add genuine tactical insight or observe meaningful patterns relevant to survival, human behavior under stress, or biological realities."
            }
          ]
        },
        "batching": {}
      },
      "id": "76c52226-d8c3-46f2-8567-c9bdfb554b82",
      "name": "Analyze Tweet & Generate Reply",
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "position": [
        -464,
        0
      ],
      "typeVersion": 1.7
    },
    {
      "parameters": {
        "options": {
          "responseFormat": "json_object",
          "temperature": 0.3
        }
      },
      "id": "45533ce9-af40-47a7-817a-9f0f08816af4",
      "name": "GPT-4o-mini",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -400,
        224
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "gztmrjeuGjHlfyFU",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const analysisResult = items[0].json;\n\n// Handle case where no tweets were selected\nif (!analysisResult.should_reply) {\n  return [{\n    json: {\n      status: 'skip_all',\n      reasoning: analysisResult.reasoning,\n      message: 'No tweets met criteria for Kirsh response'\n    }\n  }];\n}\n\n// Extract tweet data from the AI's response\nconst tweetData = {\n  id: analysisResult.tweet_id,\n  text: analysisResult.tweet_text,\n  author: { username: 'extracted_from_ai' }\n};\n\n// Validate reply quality\nconst reply = analysisResult.reply_text;\nconst safetyChecks = {\n  good_length: reply.length >= 50 && reply.length <= 240,\n  no_hashtags: !reply.includes('#'),\n  no_excessive_punct: !/[!?]{2,}/.test(reply),\n  has_substance: reply.split(' ').length >= 8,\n  sounds_natural: !reply.toLowerCase().includes('as an ai') && !reply.includes('I think')\n};\n\nconst safetyScore = Object.values(safetyChecks).filter(check => check).length / Object.keys(safetyChecks).length;\n\nif (safetyScore < 0.8) {\n  return [{\n    json: {\n      status: 'quality_fail',\n      tweet_id: tweetData.id,\n      reply: reply,\n      safety_score: safetyScore,\n      failed_checks: Object.entries(safetyChecks).filter(([key, value]) => !value).map(([key]) => key)\n    }\n  }];\n}\n\n// Ensure all fields are properly set\nreturn [{\n  json: {\n    status: 'approved',\n    tweet_id: tweetData.id || 'missing_id',\n    reply_text: reply || 'missing_reply',\n    original_tweet: tweetData.text || 'missing_original',\n    author: tweetData.author?.username || 'missing_author',\n    reasoning: analysisResult.reasoning || 'missing_reasoning',\n    safety_score: safetyScore,\n    character_count: reply ? reply.length : 0\n  }\n}];"
      },
      "id": "176ba786-5ec6-4fe3-aaec-327d2de7dba1",
      "name": "Validate Reply Quality",
      "type": "n8n-nodes-base.code",
      "position": [
        -112,
        112
      ],
      "typeVersion": 2
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "check-approved",
              "leftValue": "={{ $json.status }}",
              "rightValue": "approved",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "id": "99756c38-f20c-4dd3-bb2d-df366eb15f99",
      "name": "Is Reply Approved?",
      "type": "n8n-nodes-base.if",
      "position": [
        112,
        112
      ],
      "typeVersion": 2.2
    },
    {
      "parameters": {
        "text": "={{ $json.reply_text }}",
        "additionalFields": {
          "inReplyToStatusId": {
            "__rl": true,
            "mode": "id",
            "value": "={{ $json.tweet_id }}"
          }
        }
      },
      "id": "cc448a62-b46d-402e-873b-4b6e8c072379",
      "name": "Post Reply to X",
      "type": "n8n-nodes-base.twitter",
      "position": [
        336,
        16
      ],
      "typeVersion": 2,
      "credentials": {
        "twitterOAuth2Api": {
          "id": "qFOPID6IfqjtKnt8",
          "name": "@kirshbot"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U",
          "mode": "list",
          "cachedResultName": "kirshbot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 417179073,
          "mode": "list",
          "cachedResultName": "replied_tweets",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U/edit#gid=417179073"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tweet_id": "={{ $json.tweet_id }}",
            "reply_text": "={{ $json.reply_text }}",
            "original_tweet": "={{ $json.original_tweet }}",
            "author": "={{ $json.author }}",
            "timestamp": "={{ $now }}",
            "character_count": "={{ $json.character_count }}",
            "safety_score": "={{ $json.safety_score }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "tweet_id",
              "displayName": "tweet_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "reply_text",
              "displayName": "reply_text",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "original_tweet",
              "displayName": "original_tweet",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "author",
              "displayName": "author",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "character_count",
              "displayName": "character_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "safety_score",
              "displayName": "safety_score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "80b103d8-d47a-42bf-a6bb-088bfc8ea3e6",
      "name": "Log Successful Reply",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        560,
        16
      ],
      "typeVersion": 4.7,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ehLJL7UtvWkpMH87",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "value": "1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U",
          "mode": "list",
          "cachedResultName": "kirshbot",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U/edit?usp=drivesdk"
        },
        "sheetName": {
          "__rl": true,
          "value": 195326112,
          "mode": "list",
          "cachedResultName": "skipped_tweets",
          "cachedResultUrl": "https://docs.google.com/spreadsheets/d/1fOf7nVPUzigsSRT6Q1sRA5X3rdz08Azu9ZPyl9m-V9U/edit#gid=195326112"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "tweet_id": "bulk_analysis",
            "status": "skip_all",
            "reasoning": "={{ $json.reasoning }}",
            "original_tweet": "=Analyzed {{ $('Aggregate').item.json.tweets.length }} tweets - none suitable",
            "timestamp": "={{ $now }}"
          },
          "matchingColumns": [],
          "schema": [
            {
              "id": "tweet_id",
              "displayName": "tweet_id",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "status",
              "displayName": "status",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "reasoning",
              "displayName": "reasoning",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "original_tweet",
              "displayName": "original_tweet",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "timestamp",
              "displayName": "timestamp",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "id": "842d629c-25f5-49c9-975e-18cdbdbb5296",
      "name": "Log Skipped Tweet",
      "type": "n8n-nodes-base.googleSheets",
      "position": [
        336,
        208
      ],
      "typeVersion": 4.7,
      "credentials": {
        "googleSheetsOAuth2Api": {
          "id": "ehLJL7UtvWkpMH87",
          "name": "Google Sheets account"
        }
      }
    },
    {
      "parameters": {},
      "id": "774964f7-7d74-432b-9353-dea9a947c3e7",
      "name": "No Suitable Tweets",
      "type": "n8n-nodes-base.noOp",
      "position": [
        -400,
        400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "hours",
              "hoursInterval": 8
            }
          ]
        }
      },
      "id": "fe9f23cc-857a-4d48-a4e5-983f19883d88",
      "name": "Schedule Trigger - Every 6hrs",
      "type": "n8n-nodes-base.scheduleTrigger",
      "position": [
        -1808,
        256
      ],
      "typeVersion": 1.2
    },
    {
      "parameters": {
        "jsCode": "const tweets = items || [];\nconst repliedIds = $('Fetch Replied Tweet IDs').all()\n  .map(item => item.json.tweet_id || item.json['A'] || Object.values(item.json)[0])\n  .filter(id => id && id !== 'tweet_id');\n\n// Safety check for empty tweets array\nif (tweets.length === 0) {\n  return [{\n    json: {\n      tweets: [],\n      characterProfile: $('Character Profile Setup').item.json.characterProfile,\n      searchKeyword: $('Character Profile Setup').item.json.searchKeyword,\n      filteredOut: 0,\n      message: 'No tweets to analyze'\n    }\n  }];\n}\n\n// Filter out already-replied tweets before sending to AI\nconst unanalyzedTweets = tweets\n  .map(item => item.json)\n  .filter(tweet => tweet && tweet.id && !repliedIds.includes(tweet.id)); // Added safety checks\n\nreturn [{\n  json: {\n    tweets: unanalyzedTweets,\n    characterProfile: $('Character Profile Setup').item.json.characterProfile,\n    searchKeyword: $('Character Profile Setup').item.json.searchKeyword,\n    filteredOut: tweets.length - unanalyzedTweets.length\n  }\n}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -912,
        256
      ],
      "id": "75159f7c-a7a7-42a5-83d5-9b3c8409429a",
      "name": "Aggregate"
    }
  ],
  "pinData": {},
  "connections": {
    "Character Profile Setup": {
      "main": [
        [
          {
            "node": "Fetch Replied Tweet IDs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Replied Tweet IDs": {
      "main": [
        [
          {
            "node": "Search Twitter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Search Twitter": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Has Tweet Candidates?": {
      "main": [
        [
          {
            "node": "Analyze Tweet & Generate Reply",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Suitable Tweets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Analyze Tweet & Generate Reply": {
      "main": [
        [
          {
            "node": "Validate Reply Quality",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "GPT-4o-mini": {
      "ai_languageModel": [
        [
          {
            "node": "Analyze Tweet & Generate Reply",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Validate Reply Quality": {
      "main": [
        [
          {
            "node": "Is Reply Approved?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Is Reply Approved?": {
      "main": [
        [
          {
            "node": "Post Reply to X",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Log Skipped Tweet",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Post Reply to X": {
      "main": [
        [
          {
            "node": "Log Successful Reply",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger - Every 6hrs": {
      "main": [
        [
          {
            "node": "Character Profile Setup",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Has Tweet Candidates?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "cb678908-420a-4c17-a605-f0bc65329ec0",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7cd3de1c1dd9e2a807bc76f47d3f03944d93656380c3c3fb6814b945d43d2d6c"
  },
  "id": "MNCCSPzaDG5KD8Xv",
  "tags": []
}